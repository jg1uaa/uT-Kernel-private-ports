#
# ----------------------------------------------------------------------
#     micro T-Kernel
#
#     Copyright (C) 2006-2011 by Ken Sakamura. All rights reserved.
#     micro T-Kernel is distributed under the T-License 2.0.
# ----------------------------------------------------------------------
#
#     Version:   1.01.01
#     Released by T-Engine Forum(http://www.t-engine.org) at 2011/12/12.
#
# ----------------------------------------------------------------------
#

#
#	makerules
#		for GNU make
#
#	default rules - system-dependent (lpc2138)
#
#	MACHINE	target CPU
#		lpc2138	: LPC2138 (ARM7TDMI)
#
#	TETYPE	target T-Engine type
#		app	: T-Engine Appliance
#
#	GNUarm	GNU development tool for ARM
#

# command path
PATH = .
ifneq ($(filter "$(origin GNUarm)", $(TOOL_ORIGIN)), )
  PATH := $(PATH):$(GNUarm)/bin
endif
ifneq ($(filter "$(origin GNUs)", $(TOOL_ORIGIN)), )
  PATH := $(PATH):$(GNUs)/bin
endif
ifneq ($(filter Linux-%, $(CROSS_ARCH)), )
  PATH := $(PATH):/usr/local/bin:/bin:/usr/bin
endif
ifneq ($(filter OpenBSD-%, $(CROSS_ARCH)), )
  PATH := $(PATH):/usr/local/bin:/bin:/usr/bin
endif

# ----- T-Engine Appliance AT91M55800A (ARM7TDMI) ---------------------------------

# GCC environment
TARGET_ARCH =

# target type
_CPUTYPE_FLAGS    = -march=armv4t -Wall -Werror
_CPUTYPE_FLAGS_AS = -marmv4t -mno-fpu
_TE_SYSTEM_NAME_ = _APP_LPC2138_

# code set
_CODESET_FLAGS = -mthumb-interwork

### build option ###
CFLAGS +=
CPPFLAGS +=
ASFLAGS +=
LDFLAGS +=

### CPU CLOCK (Hz) ###
CFLAGS += -DCPU_CLOCK=58982400UL

### C  ###
CC := $(GNUarm)/bin/gcc
OUTPUT_OPTION = -o $@
ifeq ($(mode), debug)
  CFLAGS += -g
  CPPFLAGS += $(HEADER:%=-I%) -D$(_TE_SYSTEM_NAME_) -DDEBUG
else
  CFLAGS += -O2
  CPPFLAGS += $(HEADER:%=-I%) -D$(_TE_SYSTEM_NAME_)
endif

CFLAGS += $(_CPUTYPE_FLAGS) $(_CODESET_FLAGS) -mstructure-size-boundary=8 -ffreestanding

CFLAGS_WARNING      = -Wall
CFLAGS_WARNING_FULL = -pedantic -W -Wall

COMPILE.c = $(CC) $(TARGET_ARCH) $(CFLAGS) $(CPPFLAGS) -c
LINK.c = $(CC) $(TARGET_ARCH) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS)

%.o: %.c
	$(COMPILE.c) $< $(OUTPUT_OPTION)

%.s: %.c
	$(CC) $(TARGET_ARCH) $(CFLAGS) $(CPPFLAGS) -S $<

%.i: %.c
	$(CC) $(TARGET_ARCH) $(CFLAGS) $(CPPFLAGS) -E $< $(OUTPUT_OPTION)

### C++ ###
CXX := $(GNUarm)/bin/gccarm
CXXFLAGS = $(CFLAGS)

COMPILE.cc = $(CXX) $(TARGET_ARCH) $(CXXFLAGS) $(CPPFLAGS) -c
LINK.cc = $(CXX) $(TARGET_ARCH) $(CXXFLAGS) $(CPPFLAGS) $(LDFLAGS)

%.o: %.cc
	$(COMPILE.cc) $< $(OUTPUT_OPTION)

%.s: %.cc
	$(CXX) $(TARGET_ARCH) $(CXXFLAGS) $(CPPFLAGS) -S $<

%.i: %.cc
	$(CXX) $(TARGET_ARCH) $(CXXFLAGS) $(CPPFLAGS) -E $< $(OUTPUT_OPTION)

### asm ###
AS = $(GNUarm)/bin/as
ifeq ($(mode), debug)
  ASFLAGS += -g
else
  ASFLAGS +=
endif

ASFLAGS += $(_CPUTYPE_FLAGS) $(_CODESET_FLAGS)
ASFLAGS.s = $(_CPUTYPE_FLAGS_AS) $(_CODESET_FLAGS)

COMPILE.S = $(CC) $(TARGET_ARCH) $(ASFLAGS) $(CPPFLAGS) -c
COMPILE.s = $(AS) $(ASFLAGS.s)

%.o: %.S
	$(COMPILE.S) $< $(OUTPUT_OPTION)

%.o: %.s
	$(COMPILE.s) $< $(OUTPUT_OPTION)

%.i: %.S
	$(CC) $(TARGET_ARCH) $(ASFLAGS) $(CPPFLAGS) -E $< $(OUTPUT_OPTION)

### linker ###
LD = $(GNUarm)/bin/ld
ifeq ($(mode), debug)
  LDFLAGS += $(LIBDIR:%=-L%)
else
  LDFLAGS += $(LIBDIR:%=-L%)
endif

LDFLAGS += $(_CPUTYPE_FLAGS) $(_CODESET_FLAGS)

LIBDIR = $(COMMONLIB)
LOADLIBES =
LDOBJS =
LDLIBS =

# additional linker option
ifneq ($(filter sl, $(options)), )
  LDFLAGS2 = -static
else
  # no effect
  LDFLAGS2 = -static
endif
LDFLAGS3 = -static -T $(COMMONLIB)/static.lnk
START_ADR =

# create executable
LINK.o = $(CC) $(TARGET_ARCH) $(LDFLAGS) $(LDFLAGS2) $(START_ADR)

# link objects
LINK_R.o = $(CC) $(TARGET_ARCH) $(LDFLAGS) -r -nostdlib

# link objects and libraries
LINK_A.o = $(CC) $(TARGET_ARCH) $(LDFLAGS) -r

# create executable (location only)
LOCATE.o = $(CC) $(TARGET_ARCH) $(LDFLAGS) -nostdlib $(LDFLAGS3) $(START_ADR)

%: %.o
	$(LINK.o) $(LDOBJS) $^ $(LOADLIBES) $(LDLIBS) $(OUTPUT_OPTION)

%.out: %.o
	$(LINK.o) $(LDOBJS) $^ $(LOADLIBES) $(LDLIBS) $(OUTPUT_OPTION)

%.abs: %.o
	$(LINK_A.o) $(LDOBJS) $^ $(LOADLIBES) $(LDLIBS) -o _$@
	$(LOCATE.o) _$@ $(OUTPUT_OPTION)
	$(RM) _$@

### library ###
AR = $(GNUarm)/bin/ar
ARFLAGS = rv
RANLIB = $(GNUarm)/bin/ranlib

(%): %
	$(AR) $(ARFLAGS) $@ $%

### create name list ###
NM = $(GNUarm)/bin/nm
NMFLAGS = -n

%.map: %
	$(NM) $(NMFLAGS) $< > $@

%.map: %.out
	$(NM) $(NMFLAGS) $< > $@

%.map: %.abs
	$(NM) $(NMFLAGS) $< > $@

%.map: %.dll
	$(NM) $(NMFLAGS) $< > $@

### data box ###
DBCPPFLAGS = -D$(_TE_SYSTEM_NAME_)
DB_CPP = $(CPP) -nostdinc -traditional -P $(DATABOX_HEADER:%=-I%) $(DBCPPFLAGS)
DB = $(ETCBIN)/databox
DBFLAGS =
DBSRCFLAGS = -s
DATABOX = $(DB) $(DBFLAGS)

%.dbx: %.d
	$(DB_CPP) $< $@.tmp
	$(DATABOX) $@.tmp $@
	$(RM) $@.tmp

%.fsn: %.f
	$(DB_CPP) $< $@.tmp
	$(DATABOX) -n $@.tmp $@
	$(RM) $@.tmp

%.c: %.d
	$(DB_CPP) $< $@.tmp
	$(DATABOX) -n $(DBSRCFLAGS) $@.tmp $@
	$(RM) $@.tmp

### other ###
ifndef CPP
  CPP = $(GNU_BD)/bin/arm-elf-cpp
endif
STRIP = $(GNUarm)/bin/strip --strip-unneeded

OBJCOPY = $(GNU_BD)/bin/arm-elf-objcopy
OUTPUT_SREC = -O srec --srec-forceS3 --srec-len 32
